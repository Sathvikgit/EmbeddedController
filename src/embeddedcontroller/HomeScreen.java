package embeddedcontroller;

import static embeddedcontroller.EmbeddedController.*;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import javafx.embed.swing.JFXPanel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import model.DownloadManager;
import model.EmailClient;
import model.FTPclient;
import static model.FTPclient.userLog;
import model.FTPserver;
import model.MyTelnetClient;
import model.SystemDefinitions.*;
import model.TCPServer;
import static model.TCPServer.EnableServerOptions;

 
public class HomeScreen extends javax.swing.JFrame {

    // browser is implemented using JAVAFX
    public HomeScreen() {
        initComponents();
        DEBUG.log(Level.INFO,"Home Screen initialized");
        //3: Exit on Close 
        DEBUG.log(Level.INFO, "DefaultCloseOperation= {0}", getDefaultCloseOperation());
        Rearrage();
    }

public void Rearrage(){
    Dimension screenSize;
    // Get Screen Size
    Toolkit tk = Toolkit.getDefaultToolkit();
    screenSize=tk.getScreenSize();
    DEBUG.log(Level.INFO, "ScreeSize {0}",screenSize.toString());
    // Open Application Maximized
    this.setExtendedState(MAXIMIZED_BOTH);
    DEBUG.log(Level.INFO, "Home Bounds: {0}", getBounds().toString());
    
}   
    
// Add and Removing Devices 
public static void addDevice(DEVICE_TYPE type){


}
public static void removeDevice(){


}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        terminalPOPUpmenu = new javax.swing.JPopupMenu();
        FontSize = new javax.swing.JMenuItem();
        Clear = new javax.swing.JMenuItem();
        TCPServerAdvancedSettingsDialog = new javax.swing.JDialog();
        jPanel15 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tcpServerBind = new javax.swing.JComboBox<>();
        tcpServerTimeout = new javax.swing.JTextField();
        tcpServerReceiveBufferSize = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        save_tcpServerAdvSett = new javax.swing.JButton();
        cancel_tcpServerAdvSett = new javax.swing.JButton();
        downloadFIleDialog = new javax.swing.JDialog();
        downloadSettingsPanel = new javax.swing.JPanel();
        downloadLocation = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        browseFileLocation = new javax.swing.JButton();
        downloadFilePath = new javax.swing.JLabel();
        downloadFileListContainer = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        fileDownloadStatus = new javax.swing.JPanel();
        dowloadingFileName = new javax.swing.JLabel();
        downloadFileProgress = new javax.swing.JProgressBar();
        downloadOptionPanel = new javax.swing.JPanel();
        StartDownload = new javax.swing.JButton();
        CancelDownload = new javax.swing.JButton();
        MyFilePicker = new javax.swing.JFileChooser();
        mainUI = new javax.swing.JSplitPane();
        split_DeviceProp = new javax.swing.JPanel();
        hsTabs = new javax.swing.JTabbedPane();
        DeviceProperties = new javax.swing.JPanel();
        deviceDetailsContainer = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        deviceDetailsTable = new javax.swing.JTable();
        deviceHttpInfoContainer = new javax.swing.JPanel();
        deviceImageContainer = new javax.swing.JPanel();
        hr_deviceImage = new javax.swing.JLabel();
        deviceDescriptionPane = new javax.swing.JScrollPane();
        hr_deviceDescription = new javax.swing.JTextArea();
        hrDeviceDownloadsPanel = new javax.swing.JScrollPane();
        deviceDownloadsPanel = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        hr_deviceDownloadsTree = new javax.swing.JTree();
        DeviceControls = new javax.swing.JPanel();
        myFTPclient = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        FTPServerConfigPanel = new javax.swing.JPanel();
        FTPConnectionControl = new javax.swing.JPanel();
        lable_serverIP = new javax.swing.JLabel();
        ftpClient_serverIP = new javax.swing.JTextField();
        lable_port = new javax.swing.JLabel();
        ftpClient_serverPort = new javax.swing.JSpinner();
        lable_username = new javax.swing.JLabel();
        ftpClient_ServerName = new javax.swing.JTextField();
        lable_password = new javax.swing.JLabel();
        ftpClient_ServerPass = new javax.swing.JPasswordField();
        ftpClient_ServerConnect = new javax.swing.JButton();
        FTPserverCMDLogPane = new javax.swing.JScrollPane();
        FTPserverCMDLog = new javax.swing.JTextArea();
        FileMangerPanel = new javax.swing.JPanel();
        Localside = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        RefreshLocalDir = new javax.swing.JButton();
        ftpClient_browseLocalPath = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        lablePath = new javax.swing.JLabel();
        filler14 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        ftpClient_localPath = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        ftpClient_localFileTree = new javax.swing.JTree();
        TransferCotrolPanel = new javax.swing.JPanel();
        ftpClient_sendLocal2Remote = new javax.swing.JButton();
        ftpClient_sendRemote2Local = new javax.swing.JButton();
        RemoteSide = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        refreshRemoteDir = new javax.swing.JButton();
        ftpClient_remoteDeleteFile = new javax.swing.JButton();
        ftpClient_renameRemoteFile = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        filler18 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
        ftpClient_remoteCWR = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ftpClient_remoteFileTree = new javax.swing.JTree();
        jPanel20 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ftpClient_fileTransferStatus = new javax.swing.JTable();
        myFTPserver = new javax.swing.JPanel();
        FTPserverPropPanel = new javax.swing.JPanel();
        FTPservernameLable = new javax.swing.JLabel();
        FTPServerName = new javax.swing.JTextField();
        FTPPathLable = new javax.swing.JLabel();
        FTPServerPath = new javax.swing.JTextField();
        FTPportLabel = new javax.swing.JLabel();
        FTPServerPort = new javax.swing.JSpinner();
        BrowseFTPPath = new javax.swing.JToggleButton();
        FTPusernameLabel = new javax.swing.JLabel();
        FTPUserName = new javax.swing.JTextField();
        FTPpasswordLabel = new javax.swing.JLabel();
        FTPPassword = new javax.swing.JPasswordField();
        ShowFTPPassword = new javax.swing.JToggleButton();
        maxLogin_lable = new javax.swing.JLabel();
        FTPmaxLogin = new javax.swing.JSpinner();
        maxLoginperIP_lable = new javax.swing.JLabel();
        FTPMaxLoginPerIP = new javax.swing.JSpinner();
        StatusPanel = new javax.swing.JPanel();
        FTPServerStart = new javax.swing.JButton();
        FTPconnectionsLabel = new javax.swing.JLabel();
        FTPClientCount = new javax.swing.JTextField();
        FTPServerClientStatus = new javax.swing.JPanel();
        FTPClientTabel = new javax.swing.JScrollPane();
        FTPClientTableData = new javax.swing.JTable();
        PacketSender = new javax.swing.JPanel();
        TCPserver = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        tcpserverPortLable = new javax.swing.JLabel();
        tcpServerPort = new javax.swing.JSpinner();
        tcpserver_maxconnLable = new javax.swing.JLabel();
        tcpServerMaxConnections = new javax.swing.JSpinner();
        tcpServerAdvancedSettings = new javax.swing.JButton();
        startTCPServer = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TCPServerLog = new javax.swing.JTable();
        jPanel14 = new javax.swing.JPanel();
        clearTCPLog = new javax.swing.JButton();
        UDPserver = new javax.swing.JPanel();
        TelnetTerminal = new javax.swing.JPanel();
        telnetConnectionsPannel = new javax.swing.JPanel();
        telneClientConnect = new javax.swing.JButton();
        hostAddressLable = new javax.swing.JLabel();
        telnetHostAddress = new javax.swing.JTextField();
        telnetHostPortLable = new javax.swing.JLabel();
        telnetPort = new javax.swing.JSpinner();
        telnetTermainal = new javax.swing.JPanel();
        telnetServerResp = new javax.swing.JScrollPane();
        telentClientTerminal = new javax.swing.JTextArea();
        telnetCMDSendPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        telentCMD = new javax.swing.JTextField();
        telnetCMDSend = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        telnetEnableLocalEcho = new javax.swing.JCheckBox();
        telnetDeleteCMDAfterSend = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        telnetAddCR = new javax.swing.JCheckBox();
        telnetAddLF = new javax.swing.JCheckBox();
        telnetAddCRLF = new javax.swing.JCheckBox();
        HTTPserver = new javax.swing.JPanel();
        EmailClient = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        contactInfopanel = new javax.swing.JPanel();
        mail_nameLabel = new javax.swing.JLabel();
        mail_emailLable = new javax.swing.JLabel();
        mail_phoneLable = new javax.swing.JLabel();
        email_userName = new javax.swing.JTextField();
        email_userEmail = new javax.swing.JTextField();
        email_userPhone = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        email_userMessage = new javax.swing.JTextArea();
        jPanel11 = new javax.swing.JPanel();
        email_send = new javax.swing.JButton();
        split_DeviceList = new javax.swing.JPanel();
        deviceFinderPanel = new javax.swing.JPanel();
        df_startScan = new javax.swing.JButton();
        df_settings = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        dfDeviceTree = new javax.swing.JTree();
        Toolbar = new javax.swing.JMenuBar();
        ToolsMenu = new javax.swing.JMenu();
        item_packetSender = new javax.swing.JMenuItem();
        item_telnetClient = new javax.swing.JMenuItem();
        item_serialClient = new javax.swing.JMenuItem();
        DebugMenu = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        SetupMenu = new javax.swing.JMenu();
        item_tcpServer = new javax.swing.JMenuItem();
        item_tcpClient = new javax.swing.JMenuItem();
        item_udpServer = new javax.swing.JMenuItem();
        item_udpClient = new javax.swing.JMenuItem();

        FontSize.setText("Font Size");
        terminalPOPUpmenu.add(FontSize);

        Clear.setText("Clear");
        terminalPOPUpmenu.add(Clear);

        TCPServerAdvancedSettingsDialog.setTitle("TCP Server Advanced Settings");
        TCPServerAdvancedSettingsDialog.setAlwaysOnTop(true);
        TCPServerAdvancedSettingsDialog.setMinimumSize(new java.awt.Dimension(400, 250));

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("TCP Server Advanced Settings"));

        jLabel1.setText("Receive Buffer Size");

        jLabel3.setText("Time Out (milli Sec)");

        jLabel4.setText("Bind");

        tcpServerTimeout.setText("0");
        tcpServerTimeout.setToolTipText("The timeout must be > 0. A timeout of zero is interpreted as an infinite timeout.");

        tcpServerReceiveBufferSize.setToolTipText("The value of BUFFER SIZE is used both to set the size of the internal socket receive buffer, and to set the size of the TCP receive window that is advertized to the remote peer");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tcpServerBind, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tcpServerTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tcpServerReceiveBufferSize, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(216, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tcpServerReceiveBufferSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tcpServerBind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tcpServerTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TCPServerAdvancedSettingsDialog.getContentPane().add(jPanel15, java.awt.BorderLayout.CENTER);

        save_tcpServerAdvSett.setText("Save");
        save_tcpServerAdvSett.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_tcpServerAdvSettActionPerformed(evt);
            }
        });

        cancel_tcpServerAdvSett.setText("Cancel");
        cancel_tcpServerAdvSett.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_tcpServerAdvSettActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addContainerGap(390, Short.MAX_VALUE)
                .addComponent(cancel_tcpServerAdvSett)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(save_tcpServerAdvSett)
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save_tcpServerAdvSett)
                    .addComponent(cancel_tcpServerAdvSett))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        TCPServerAdvancedSettingsDialog.getContentPane().add(jPanel16, java.awt.BorderLayout.PAGE_END);

        downloadFIleDialog.setTitle("Download");
        downloadFIleDialog.setAlwaysOnTop(true);
        downloadFIleDialog.setMaximumSize(new java.awt.Dimension(500, 250));
        downloadFIleDialog.setMinimumSize(new java.awt.Dimension(500, 250));
        downloadFIleDialog.setPreferredSize(new java.awt.Dimension(500, 250));
        downloadFIleDialog.setResizable(false);
        downloadFIleDialog.getContentPane().setLayout(new java.awt.BorderLayout(0, 10));

        downloadSettingsPanel.setLayout(new java.awt.BorderLayout(0, 20));

        downloadLocation.setLayout(new javax.swing.BoxLayout(downloadLocation, javax.swing.BoxLayout.LINE_AXIS));

        jLabel5.setText("Save File to");
        downloadLocation.add(jLabel5);

        browseFileLocation.setText("Browse");
        downloadLocation.add(browseFileLocation);

        downloadFilePath.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        downloadFilePath.setForeground(new java.awt.Color(0, 0, 255));
        downloadFilePath.setText("/");
        downloadLocation.add(downloadFilePath);

        downloadSettingsPanel.add(downloadLocation, java.awt.BorderLayout.PAGE_END);

        downloadFileListContainer.setMinimumSize(new java.awt.Dimension(50, 50));
        downloadFileListContainer.setLayout(new javax.swing.BoxLayout(downloadFileListContainer, javax.swing.BoxLayout.Y_AXIS));

        jCheckBox1.setText("File 1");
        downloadFileListContainer.add(jCheckBox1);

        jCheckBox2.setText("File 2");
        downloadFileListContainer.add(jCheckBox2);

        downloadSettingsPanel.add(downloadFileListContainer, java.awt.BorderLayout.CENTER);

        downloadFIleDialog.getContentPane().add(downloadSettingsPanel, java.awt.BorderLayout.PAGE_START);

        fileDownloadStatus.setLayout(new java.awt.BorderLayout(0, 10));

        dowloadingFileName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dowloadingFileName.setText("File(1/2): Size = 1024 bytes ");
        fileDownloadStatus.add(dowloadingFileName, java.awt.BorderLayout.PAGE_START);

        downloadFileProgress.setValue(10);
        fileDownloadStatus.add(downloadFileProgress, java.awt.BorderLayout.PAGE_END);

        downloadFIleDialog.getContentPane().add(fileDownloadStatus, java.awt.BorderLayout.CENTER);

        StartDownload.setText("Download");
        StartDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartDownloadActionPerformed(evt);
            }
        });

        CancelDownload.setText("Cancel");
        CancelDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelDownloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout downloadOptionPanelLayout = new javax.swing.GroupLayout(downloadOptionPanel);
        downloadOptionPanel.setLayout(downloadOptionPanelLayout);
        downloadOptionPanelLayout.setHorizontalGroup(
            downloadOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downloadOptionPanelLayout.createSequentialGroup()
                .addContainerGap(303, Short.MAX_VALUE)
                .addComponent(StartDownload)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CancelDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        downloadOptionPanelLayout.setVerticalGroup(
            downloadOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, downloadOptionPanelLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(downloadOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CancelDownload)
                    .addComponent(StartDownload))
                .addContainerGap())
        );

        downloadFIleDialog.getContentPane().add(downloadOptionPanel, java.awt.BorderLayout.PAGE_END);

        MyFilePicker.setDialogTitle("");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Embedded Controller");

        mainUI.setDividerSize(3);
        mainUI.setResizeWeight(0.4);

        split_DeviceProp.setLayout(new java.awt.BorderLayout(10, 0));

        hsTabs.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        hsTabs.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N

        DeviceProperties.setLayout(new javax.swing.BoxLayout(DeviceProperties, javax.swing.BoxLayout.LINE_AXIS));

        deviceDetailsContainer.setBorder(javax.swing.BorderFactory.createTitledBorder("Device Information"));
        deviceDetailsContainer.setLayout(new java.awt.BorderLayout());

        deviceDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Properties", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(deviceDetailsTable);

        deviceDetailsContainer.add(jScrollPane7, java.awt.BorderLayout.CENTER);

        DeviceProperties.add(deviceDetailsContainer);

        deviceHttpInfoContainer.setLayout(new java.awt.BorderLayout());

        deviceImageContainer.setMinimumSize(new java.awt.Dimension(275, 275));
        deviceImageContainer.setLayout(new javax.swing.BoxLayout(deviceImageContainer, javax.swing.BoxLayout.LINE_AXIS));

        hr_deviceImage.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        hr_deviceImage.setMaximumSize(new java.awt.Dimension(250, 250));
        hr_deviceImage.setMinimumSize(new java.awt.Dimension(250, 250));
        hr_deviceImage.setPreferredSize(new java.awt.Dimension(250, 250));
        deviceImageContainer.add(hr_deviceImage);

        deviceHttpInfoContainer.add(deviceImageContainer, java.awt.BorderLayout.PAGE_START);

        deviceDescriptionPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Device Description"));
        deviceDescriptionPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        hr_deviceDescription.setEditable(false);
        hr_deviceDescription.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderLight"));
        hr_deviceDescription.setColumns(20);
        hr_deviceDescription.setLineWrap(true);
        hr_deviceDescription.setRows(5);
        deviceDescriptionPane.setViewportView(hr_deviceDescription);

        deviceHttpInfoContainer.add(deviceDescriptionPane, java.awt.BorderLayout.CENTER);

        hrDeviceDownloadsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Downloads"));

        deviceDownloadsPanel.setLayout(new java.awt.BorderLayout());

        jScrollPane8.setMaximumSize(new java.awt.Dimension(32767, 250));
        jScrollPane8.setPreferredSize(new java.awt.Dimension(45, 150));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        hr_deviceDownloadsTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane8.setViewportView(hr_deviceDownloadsTree);

        deviceDownloadsPanel.add(jScrollPane8, java.awt.BorderLayout.CENTER);

        hrDeviceDownloadsPanel.setViewportView(deviceDownloadsPanel);

        deviceHttpInfoContainer.add(hrDeviceDownloadsPanel, java.awt.BorderLayout.PAGE_END);

        DeviceProperties.add(deviceHttpInfoContainer);

        hsTabs.addTab("Details", DeviceProperties);

        javax.swing.GroupLayout DeviceControlsLayout = new javax.swing.GroupLayout(DeviceControls);
        DeviceControls.setLayout(DeviceControlsLayout);
        DeviceControlsLayout.setHorizontalGroup(
            DeviceControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 642, Short.MAX_VALUE)
        );
        DeviceControlsLayout.setVerticalGroup(
            DeviceControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 579, Short.MAX_VALUE)
        );

        hsTabs.addTab("Controls", DeviceControls);

        myFTPclient.setMaximumSize(new java.awt.Dimension(300, 200));
        myFTPclient.setLayout(new java.awt.BorderLayout(0, 10));

        jPanel17.setLayout(new java.awt.BorderLayout(0, 10));

        FTPServerConfigPanel.setLayout(new java.awt.BorderLayout(0, 10));

        FTPConnectionControl.setLayout(new javax.swing.BoxLayout(FTPConnectionControl, javax.swing.BoxLayout.LINE_AXIS));

        lable_serverIP.setText("Server IP");
        FTPConnectionControl.add(lable_serverIP);

        ftpClient_serverIP.setText("192.168.1.151");
        FTPConnectionControl.add(ftpClient_serverIP);

        lable_port.setText("Port");
        FTPConnectionControl.add(lable_port);

        ftpClient_serverPort.setModel(new javax.swing.SpinnerNumberModel(21, 0, 50, 1));
        FTPConnectionControl.add(ftpClient_serverPort);

        lable_username.setText("Username");
        FTPConnectionControl.add(lable_username);

        ftpClient_ServerName.setText("admin");
        FTPConnectionControl.add(ftpClient_ServerName);

        lable_password.setText("Password");
        FTPConnectionControl.add(lable_password);

        ftpClient_ServerPass.setText("pass");
        FTPConnectionControl.add(ftpClient_ServerPass);

        ftpClient_ServerConnect.setText("Connect");
        ftpClient_ServerConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ftpClient_ServerConnectActionPerformed(evt);
            }
        });
        FTPConnectionControl.add(ftpClient_ServerConnect);

        FTPServerConfigPanel.add(FTPConnectionControl, java.awt.BorderLayout.PAGE_START);

        FTPserverCMDLog.setColumns(20);
        FTPserverCMDLog.setRows(5);
        FTPserverCMDLogPane.setViewportView(FTPserverCMDLog);

        FTPServerConfigPanel.add(FTPserverCMDLogPane, java.awt.BorderLayout.CENTER);

        jPanel17.add(FTPServerConfigPanel, java.awt.BorderLayout.PAGE_START);

        FileMangerPanel.setLayout(new javax.swing.BoxLayout(FileMangerPanel, javax.swing.BoxLayout.LINE_AXIS));

        Localside.setBorder(javax.swing.BorderFactory.createTitledBorder("Local"));
        Localside.setMinimumSize(new java.awt.Dimension(150, 100));
        Localside.setPreferredSize(new java.awt.Dimension(229, 388));
        Localside.setLayout(new java.awt.BorderLayout());

        jPanel2.setAlignmentX(1.0F);
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel18.setLayout(new javax.swing.BoxLayout(jPanel18, javax.swing.BoxLayout.LINE_AXIS));

        RefreshLocalDir.setText("Refresh");
        jPanel18.add(RefreshLocalDir);

        ftpClient_browseLocalPath.setText("Browse");
        jPanel18.add(ftpClient_browseLocalPath);

        jPanel2.add(jPanel18, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        lablePath.setText("Path");
        jPanel3.add(lablePath);
        jPanel3.add(filler14);
        jPanel3.add(ftpClient_localPath);

        jPanel2.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        Localside.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        ftpClient_localFileTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane4.setViewportView(ftpClient_localFileTree);

        Localside.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        FileMangerPanel.add(Localside);

        ftpClient_sendLocal2Remote.setText("=>");
        ftpClient_sendLocal2Remote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ftpClient_sendLocal2RemoteActionPerformed(evt);
            }
        });

        ftpClient_sendRemote2Local.setText("<=");

        javax.swing.GroupLayout TransferCotrolPanelLayout = new javax.swing.GroupLayout(TransferCotrolPanel);
        TransferCotrolPanel.setLayout(TransferCotrolPanelLayout);
        TransferCotrolPanelLayout.setHorizontalGroup(
            TransferCotrolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ftpClient_sendLocal2Remote, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(ftpClient_sendRemote2Local, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        TransferCotrolPanelLayout.setVerticalGroup(
            TransferCotrolPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransferCotrolPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ftpClient_sendLocal2Remote)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ftpClient_sendRemote2Local)
                .addContainerGap())
        );

        FileMangerPanel.add(TransferCotrolPanel);

        RemoteSide.setBorder(javax.swing.BorderFactory.createTitledBorder("Remote"));
        RemoteSide.setMinimumSize(new java.awt.Dimension(150, 100));
        RemoteSide.setPreferredSize(new java.awt.Dimension(229, 388));
        RemoteSide.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel19.setLayout(new javax.swing.BoxLayout(jPanel19, javax.swing.BoxLayout.LINE_AXIS));

        refreshRemoteDir.setText("Refresh");
        refreshRemoteDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshRemoteDirActionPerformed(evt);
            }
        });
        jPanel19.add(refreshRemoteDir);

        ftpClient_remoteDeleteFile.setText("D");
        jPanel19.add(ftpClient_remoteDeleteFile);

        ftpClient_renameRemoteFile.setText("R");
        jPanel19.add(ftpClient_renameRemoteFile);

        jPanel4.add(jPanel19, java.awt.BorderLayout.PAGE_START);

        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.LINE_AXIS));

        jLabel2.setText("Path");
        jPanel5.add(jLabel2);
        jPanel5.add(filler18);
        jPanel5.add(ftpClient_remoteCWR);

        jPanel4.add(jPanel5, java.awt.BorderLayout.PAGE_END);

        RemoteSide.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        ftpClient_remoteFileTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(ftpClient_remoteFileTree);

        RemoteSide.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        FileMangerPanel.add(RemoteSide);

        jPanel17.add(FileMangerPanel, java.awt.BorderLayout.CENTER);

        myFTPclient.add(jPanel17, java.awt.BorderLayout.CENTER);

        ftpClient_fileTransferStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File Name", "Direction", "Size", "Status", "Progress"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(ftpClient_fileTransferStatus);

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE)
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
        );

        myFTPclient.add(jPanel20, java.awt.BorderLayout.PAGE_END);

        hsTabs.addTab("FTP Client", myFTPclient);

        FTPserverPropPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Server Config"));

        FTPservernameLable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        FTPservernameLable.setText("Server Name");

        FTPServerName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        FTPServerName.setText("MyFTPServer");

        FTPPathLable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        FTPPathLable.setText("Path");

        FTPServerPath.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        FTPportLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        FTPportLabel.setText("Port");

        FTPServerPort.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        FTPServerPort.setModel(new javax.swing.SpinnerNumberModel(21, 0, 65535, 1));

        BrowseFTPPath.setText("Browse");
        BrowseFTPPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseFTPPathActionPerformed(evt);
            }
        });

        FTPusernameLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        FTPusernameLabel.setText("Username");

        FTPUserName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        FTPUserName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        FTPUserName.setText("admin");

        FTPpasswordLabel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        FTPpasswordLabel.setText("Password");

        FTPPassword.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        FTPPassword.setText("pass");

        ShowFTPPassword.setText("Show");

        maxLogin_lable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        maxLogin_lable.setText("Max Login ");

        FTPmaxLogin.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        FTPmaxLogin.setModel(new javax.swing.SpinnerNumberModel(10, 1, 100, 1));

        maxLoginperIP_lable.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        maxLoginperIP_lable.setText("Max Login/IP ");

        FTPMaxLoginPerIP.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        FTPMaxLoginPerIP.setModel(new javax.swing.SpinnerNumberModel(2, 1, 50, 1));

        javax.swing.GroupLayout FTPserverPropPanelLayout = new javax.swing.GroupLayout(FTPserverPropPanel);
        FTPserverPropPanel.setLayout(FTPserverPropPanelLayout);
        FTPserverPropPanelLayout.setHorizontalGroup(
            FTPserverPropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FTPserverPropPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(FTPserverPropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(FTPpasswordLabel)
                    .addComponent(FTPportLabel)
                    .addComponent(FTPPathLable)
                    .addComponent(FTPservernameLable)
                    .addComponent(FTPusernameLabel)
                    .addComponent(maxLogin_lable)
                    .addComponent(maxLoginperIP_lable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(FTPserverPropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FTPServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(FTPserverPropPanelLayout.createSequentialGroup()
                        .addGroup(FTPserverPropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(FTPPassword)
                            .addComponent(FTPUserName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FTPServerPath, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FTPServerName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(FTPserverPropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BrowseFTPPath)
                            .addComponent(ShowFTPPassword, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(FTPmaxLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FTPMaxLoginPerIP, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        FTPserverPropPanelLayout.setVerticalGroup(
            FTPserverPropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FTPserverPropPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(FTPserverPropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FTPservernameLable)
                    .addComponent(FTPServerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FTPserverPropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FTPPathLable)
                    .addComponent(FTPServerPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BrowseFTPPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FTPserverPropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FTPportLabel)
                    .addComponent(FTPServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FTPserverPropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FTPusernameLabel)
                    .addComponent(FTPUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FTPserverPropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FTPpasswordLabel)
                    .addComponent(FTPPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ShowFTPPassword))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(FTPserverPropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxLogin_lable)
                    .addComponent(FTPmaxLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FTPserverPropPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxLoginperIP_lable)
                    .addComponent(FTPMaxLoginPerIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        FTPServerStart.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        FTPServerStart.setText("Start");
        FTPServerStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FTPServerStartActionPerformed(evt);
            }
        });

        FTPconnectionsLabel.setText("Connections:");

        FTPClientCount.setEditable(false);
        FTPClientCount.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        FTPClientCount.setForeground(new java.awt.Color(0, 0, 255));
        FTPClientCount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        FTPClientCount.setText("0");

        javax.swing.GroupLayout StatusPanelLayout = new javax.swing.GroupLayout(StatusPanel);
        StatusPanel.setLayout(StatusPanelLayout);
        StatusPanelLayout.setHorizontalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatusPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StatusPanelLayout.createSequentialGroup()
                        .addComponent(FTPconnectionsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FTPClientCount, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(FTPServerStart, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        StatusPanelLayout.setVerticalGroup(
            StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatusPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(FTPServerStart, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(StatusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(FTPClientCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FTPconnectionsLabel))
                .addGap(37, 37, 37))
        );

        FTPServerClientStatus.setBorder(javax.swing.BorderFactory.createTitledBorder("Client Status"));

        FTPClientTableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "IP", "User", "LoginTime", "Status", "Action"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        FTPClientTabel.setViewportView(FTPClientTableData);

        javax.swing.GroupLayout FTPServerClientStatusLayout = new javax.swing.GroupLayout(FTPServerClientStatus);
        FTPServerClientStatus.setLayout(FTPServerClientStatusLayout);
        FTPServerClientStatusLayout.setHorizontalGroup(
            FTPServerClientStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(FTPClientTabel)
        );
        FTPServerClientStatusLayout.setVerticalGroup(
            FTPServerClientStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(FTPClientTabel, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout myFTPserverLayout = new javax.swing.GroupLayout(myFTPserver);
        myFTPserver.setLayout(myFTPserverLayout);
        myFTPserverLayout.setHorizontalGroup(
            myFTPserverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myFTPserverLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(myFTPserverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FTPServerClientStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(myFTPserverLayout.createSequentialGroup()
                        .addComponent(FTPserverPropPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(StatusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        myFTPserverLayout.setVerticalGroup(
            myFTPserverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myFTPserverLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(myFTPserverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(FTPserverPropPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(StatusPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FTPServerClientStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        hsTabs.addTab("FTP Server", myFTPserver);

        javax.swing.GroupLayout PacketSenderLayout = new javax.swing.GroupLayout(PacketSender);
        PacketSender.setLayout(PacketSenderLayout);
        PacketSenderLayout.setHorizontalGroup(
            PacketSenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 642, Short.MAX_VALUE)
        );
        PacketSenderLayout.setVerticalGroup(
            PacketSenderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 579, Short.MAX_VALUE)
        );

        hsTabs.addTab("Packet Sender ", PacketSender);

        TCPserver.setLayout(new java.awt.BorderLayout());

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("TCP Server"));

        tcpserverPortLable.setText("Port");

        tcpServerPort.setModel(new javax.swing.SpinnerNumberModel(5050, 0, 65535, 1));
        tcpServerPort.setToolTipText("TCP server will be accept conenctions on this port");
        tcpServerPort.setEditor(new javax.swing.JSpinner.NumberEditor(tcpServerPort, "#####"));

        tcpserver_maxconnLable.setText("Max Connections");

        tcpServerMaxConnections.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));
        tcpServerMaxConnections.setToolTipText("Number to clients this server can handle concurrently");
        tcpServerMaxConnections.setEditor(new javax.swing.JSpinner.NumberEditor(tcpServerMaxConnections, "##"));

        tcpServerAdvancedSettings.setText("Advanced Settings");
        tcpServerAdvancedSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tcpServerAdvancedSettingsActionPerformed(evt);
            }
        });

        startTCPServer.setText("Start");
        startTCPServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTCPServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tcpserverPortLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tcpServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tcpserver_maxconnLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tcpServerMaxConnections, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tcpServerAdvancedSettings)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 158, Short.MAX_VALUE)
                .addComponent(startTCPServer, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(startTCPServer, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(tcpServerPort, javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tcpserver_maxconnLable, javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tcpserverPortLable, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tcpServerMaxConnections, javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tcpServerAdvancedSettings, javax.swing.GroupLayout.Alignment.CENTER))
                .addContainerGap())
        );

        TCPserver.add(jPanel12, java.awt.BorderLayout.PAGE_START);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));
        jPanel13.setLayout(new java.awt.BorderLayout());

        TCPServerLog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time", "From IP", "From Port", "To IP", "To Port", "Method", "ASCII", "Hex"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TCPServerLog.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(TCPServerLog);

        jPanel13.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        TCPserver.add(jPanel13, java.awt.BorderLayout.CENTER);

        clearTCPLog.setText("Clear Log");
        clearTCPLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTCPLogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap(555, Short.MAX_VALUE)
                .addComponent(clearTCPLog)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clearTCPLog)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TCPserver.add(jPanel14, java.awt.BorderLayout.PAGE_END);

        hsTabs.addTab("TCP Server", TCPserver);

        javax.swing.GroupLayout UDPserverLayout = new javax.swing.GroupLayout(UDPserver);
        UDPserver.setLayout(UDPserverLayout);
        UDPserverLayout.setHorizontalGroup(
            UDPserverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 642, Short.MAX_VALUE)
        );
        UDPserverLayout.setVerticalGroup(
            UDPserverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 579, Short.MAX_VALUE)
        );

        hsTabs.addTab("UDP Server", UDPserver);

        TelnetTerminal.setLayout(new java.awt.BorderLayout(0, 10));

        telnetConnectionsPannel.setBorder(javax.swing.BorderFactory.createTitledBorder("Telnet Server"));

        telneClientConnect.setText("Connect");
        telneClientConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                telneClientConnectActionPerformed(evt);
            }
        });

        hostAddressLable.setText("Host Address");

        telnetHostPortLable.setText("Port");

        telnetPort.setModel(new javax.swing.SpinnerNumberModel(23, 1, 65535, 1));
        telnetPort.setToolTipText("Telnet Server Port");
        telnetPort.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        telnetPort.setEditor(new javax.swing.JSpinner.NumberEditor(telnetPort, "####"));

        javax.swing.GroupLayout telnetConnectionsPannelLayout = new javax.swing.GroupLayout(telnetConnectionsPannel);
        telnetConnectionsPannel.setLayout(telnetConnectionsPannelLayout);
        telnetConnectionsPannelLayout.setHorizontalGroup(
            telnetConnectionsPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, telnetConnectionsPannelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(hostAddressLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(telnetHostAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(telnetHostPortLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(telnetPort, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(telneClientConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(85, Short.MAX_VALUE))
        );
        telnetConnectionsPannelLayout.setVerticalGroup(
            telnetConnectionsPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(telnetConnectionsPannelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(telnetConnectionsPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostAddressLable)
                    .addComponent(telnetHostAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(telnetHostPortLable, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(telnetPort, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(telneClientConnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TelnetTerminal.add(telnetConnectionsPannel, java.awt.BorderLayout.PAGE_START);

        telnetTermainal.setLayout(new java.awt.BorderLayout(0, 10));

        telentClientTerminal.setEditable(false);
        telentClientTerminal.setBackground(new java.awt.Color(0, 0, 0));
        telentClientTerminal.setColumns(20);
        telentClientTerminal.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        telentClientTerminal.setForeground(new java.awt.Color(255, 255, 255));
        telentClientTerminal.setRows(5);
        telnetServerResp.setViewportView(telentClientTerminal);

        telnetTermainal.add(telnetServerResp, java.awt.BorderLayout.CENTER);

        telnetCMDSendPanel.setPreferredSize(new java.awt.Dimension(301, 100));
        telnetCMDSendPanel.setLayout(new java.awt.BorderLayout(10, 0));

        jPanel1.setMinimumSize(new java.awt.Dimension(100, 23));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.BorderLayout(10, 0));

        telentCMD.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        telentCMD.setMinimumSize(new java.awt.Dimension(100, 23));
        telentCMD.setPreferredSize(new java.awt.Dimension(100, 23));
        telentCMD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                telentCMDKeyReleased(evt);
            }
        });
        jPanel7.add(telentCMD, java.awt.BorderLayout.CENTER);

        telnetCMDSend.setText("Send");
        telnetCMDSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                telnetCMDSendActionPerformed(evt);
            }
        });
        jPanel7.add(telnetCMDSend, java.awt.BorderLayout.LINE_END);

        jPanel1.add(jPanel7, java.awt.BorderLayout.CENTER);

        telnetEnableLocalEcho.setText("Local Echo");

        telnetDeleteCMDAfterSend.setSelected(true);
        telnetDeleteCMDAfterSend.setText("Delete command after send");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap(313, Short.MAX_VALUE)
                .addComponent(telnetEnableLocalEcho)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(telnetDeleteCMDAfterSend)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(telnetDeleteCMDAfterSend)
                    .addComponent(telnetEnableLocalEcho))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel8, java.awt.BorderLayout.PAGE_END);

        telnetCMDSendPanel.add(jPanel1, java.awt.BorderLayout.CENTER);

        telnetAddCR.setText("CR");
        telnetAddCR.setToolTipText("Carriage Return");

        telnetAddLF.setText("LF");
        telnetAddLF.setToolTipText("Line Feed");

        telnetAddCRLF.setSelected(true);
        telnetAddCRLF.setText("CR+LF");
        telnetAddCRLF.setToolTipText("Carriage Return + Line Feed");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(telnetAddCR)
                    .addComponent(telnetAddLF)
                    .addComponent(telnetAddCRLF))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(telnetAddCR)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(telnetAddLF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(telnetAddCRLF)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        telnetCMDSendPanel.add(jPanel6, java.awt.BorderLayout.LINE_END);

        telnetTermainal.add(telnetCMDSendPanel, java.awt.BorderLayout.PAGE_END);

        TelnetTerminal.add(telnetTermainal, java.awt.BorderLayout.CENTER);

        hsTabs.addTab("Telnet Terminal", TelnetTerminal);

        javax.swing.GroupLayout HTTPserverLayout = new javax.swing.GroupLayout(HTTPserver);
        HTTPserver.setLayout(HTTPserverLayout);
        HTTPserverLayout.setHorizontalGroup(
            HTTPserverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 642, Short.MAX_VALUE)
        );
        HTTPserverLayout.setVerticalGroup(
            HTTPserverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 579, Short.MAX_VALUE)
        );

        hsTabs.addTab("HTTP Server", HTTPserver);

        EmailClient.setLayout(new javax.swing.BoxLayout(EmailClient, javax.swing.BoxLayout.LINE_AXIS));

        jPanel10.setLayout(new java.awt.BorderLayout());

        contactInfopanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Contact Info"));

        mail_nameLabel.setText("Name");

        mail_emailLable.setText("Email");

        mail_phoneLable.setText("Phone");

        javax.swing.GroupLayout contactInfopanelLayout = new javax.swing.GroupLayout(contactInfopanel);
        contactInfopanel.setLayout(contactInfopanelLayout);
        contactInfopanelLayout.setHorizontalGroup(
            contactInfopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contactInfopanelLayout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(contactInfopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mail_nameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mail_phoneLable, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mail_emailLable, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(contactInfopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(email_userName, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(email_userEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(email_userPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(223, 223, 223))
        );
        contactInfopanelLayout.setVerticalGroup(
            contactInfopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contactInfopanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contactInfopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mail_nameLabel)
                    .addComponent(email_userName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(contactInfopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mail_emailLable)
                    .addComponent(email_userEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(contactInfopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mail_phoneLable)
                    .addComponent(email_userPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contactInfopanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contactInfopanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel10.add(jPanel9, java.awt.BorderLayout.PAGE_START);

        jScrollPane5.setBorder(javax.swing.BorderFactory.createTitledBorder("Message"));

        email_userMessage.setColumns(20);
        email_userMessage.setRows(5);
        jScrollPane5.setViewportView(email_userMessage);

        jPanel10.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        email_send.setText("Send");
        email_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                email_sendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(557, Short.MAX_VALUE)
                .addComponent(email_send, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(email_send, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );

        jPanel10.add(jPanel11, java.awt.BorderLayout.PAGE_END);

        EmailClient.add(jPanel10);

        hsTabs.addTab("Support", EmailClient);

        split_DeviceProp.add(hsTabs, java.awt.BorderLayout.CENTER);

        mainUI.setRightComponent(split_DeviceProp);

        split_DeviceList.setLayout(new java.awt.BorderLayout());

        deviceFinderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        df_startScan.setText("Scan");

        df_settings.setText("Settings");

        javax.swing.GroupLayout deviceFinderPanelLayout = new javax.swing.GroupLayout(deviceFinderPanel);
        deviceFinderPanel.setLayout(deviceFinderPanelLayout);
        deviceFinderPanelLayout.setHorizontalGroup(
            deviceFinderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deviceFinderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(df_startScan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(df_settings)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        deviceFinderPanelLayout.setVerticalGroup(
            deviceFinderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deviceFinderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deviceFinderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(df_startScan)
                    .addComponent(df_settings))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        split_DeviceList.add(deviceFinderPanel, java.awt.BorderLayout.PAGE_START);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("No Devices Found");
        dfDeviceTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(dfDeviceTree);

        split_DeviceList.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        mainUI.setLeftComponent(split_DeviceList);

        getContentPane().add(mainUI, java.awt.BorderLayout.CENTER);

        ToolsMenu.setText("Tools");

        item_packetSender.setText("Packet Sender");
        item_packetSender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_packetSenderActionPerformed(evt);
            }
        });
        ToolsMenu.add(item_packetSender);

        item_telnetClient.setText("Telnet Terminal");
        item_telnetClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_telnetClientActionPerformed(evt);
            }
        });
        ToolsMenu.add(item_telnetClient);

        item_serialClient.setText("Serial Terminal");
        ToolsMenu.add(item_serialClient);

        Toolbar.add(ToolsMenu);

        DebugMenu.setText("Debug");

        jMenuItem4.setText("Generate Debug Report");
        DebugMenu.add(jMenuItem4);

        Toolbar.add(DebugMenu);

        SetupMenu.setText("Setup");

        item_tcpServer.setText("TCP Server");
        SetupMenu.add(item_tcpServer);

        item_tcpClient.setText("TCP Client");
        SetupMenu.add(item_tcpClient);

        item_udpServer.setText("UDP Server");
        SetupMenu.add(item_udpServer);

        item_udpClient.setText("UDP Client");
        SetupMenu.add(item_udpClient);

        Toolbar.add(SetupMenu);

        setJMenuBar(Toolbar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void item_packetSenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_packetSenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_item_packetSenderActionPerformed

    private void item_telnetClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_telnetClientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_item_telnetClientActionPerformed

    private void FTPServerStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FTPServerStartActionPerformed
        // Start the FTP Server 
        DEBUG.log(Level.INFO,"FTPServer : {0}",evt.getActionCommand());
        if("Start".equals(evt.getActionCommand())){
            String name ="";
            String path = ""; 
            int port =-1;
            String userName = "";
            String passWord ="";
            name = FTPServerName.getText();
            path = FTPServerPath.getText();
            port = (int)FTPServerPort.getValue();
            DEBUG.log(Level.INFO,"FTPServer : {0}","Starting the server in port = "+port);
    
            userName = FTPUserName.getText();
            passWord = new String(FTPPassword.getPassword());
            
            // validate all the pram
            DEBUG.log(Level.INFO,"FTPServer : {0}","Name = "+name+" path= "+path+" Username= "+userName+" Pass= "+passWord);
            
            //Start the server
            EmbeddedController.myFTPServer = new FTPserver(name, port, path, userName, passWord);

            FTPServerStart.setText("Stop");

        }else{
        DEBUG.log(Level.INFO,"FTPServer : {0}","Stopping the Server");
        FTPServerStart.setText("Start");
            EmbeddedController.myFTPServer.StopServer();
        }
    }//GEN-LAST:event_FTPServerStartActionPerformed

    private void BrowseFTPPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseFTPPathActionPerformed
        
        DEBUG.log(Level.INFO,"FTPServer : {0}","Choosing Directory");
        // open File chooser 
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("FTP Directory");
        // choose only directory
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false); 
        String path=""; 
        
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            // Get the directory
            path = chooser.getSelectedFile().getAbsolutePath();
            DEBUG.log(Level.INFO,"FTPServer : Dir Path {0}",path);
            FTPServerPath.setText(path);
               
        }else {
            DEBUG.log(Level.WARNING,"FTPServer : Dir Path = No Selection!");
        }
    }//GEN-LAST:event_BrowseFTPPathActionPerformed

    
    private void telneClientConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_telneClientConnectActionPerformed
        
        if("Connect".equals(telneClientConnect.getActionCommand())){
            // validate server IP and Port
            
            String serverIp = telnetHostAddress.getText();
            int port = (int)telnetPort.getValue();
            myTelnetClient = new MyTelnetClient(serverIp,port);
            if(myTelnetClient.isConnected()){
                telneClientConnect.setText("Disconnect");
                
                // disable host address and port fields
                telnetHostAddress.setEnabled(false);
                telnetPort.setEnabled(false);
            }                    
        }else {
            if (myTelnetClient != null) {
                myTelnetClient.stop();               
            }
            telneClientConnect.setText("Connect");
             telnetHostAddress.setEnabled(true);
             telnetPort.setEnabled(true);
        }
    }//GEN-LAST:event_telneClientConnectActionPerformed

    private void telnetCMDSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_telnetCMDSendActionPerformed
         if (myTelnetClient != null) {
            String cmd = telentCMD.getText();
            myTelnetClient.send(cmd);
            // if the server has echo feature you will automatically get the echo else
            if (telnetDeleteCMDAfterSend.isSelected()) {
                telentCMD.setText("");
            }
            if (telnetEnableLocalEcho.isSelected()) {
                telentClientTerminal.append(">" + cmd + "\r\n");
            }
        }
    }//GEN-LAST:event_telnetCMDSendActionPerformed

    private void telentCMDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_telentCMDKeyReleased
        // send command when Enter is pressed
       if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
           telnetCMDSend.doClick();     
        }
    }//GEN-LAST:event_telentCMDKeyReleased

    private void email_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_email_sendActionPerformed
               
           emailClient = new EmailClient();
           String subject = "Support For : "+email_userName.getText();
           String message = "User Info\r\n ---------- \r\n Name:"+
                                    email_userName.getText()+
                                    "\r\n Email: "+email_userEmail.getText()+
                                    "\r\n Phone: "+email_userPhone.getText()+
                                    "\r\n \r\n Message: \r\n ------------- \r\n"+ 
                                    email_userMessage.getText();
           emailClient.send(subject, message);       
    }//GEN-LAST:event_email_sendActionPerformed

    private void startTCPServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTCPServerActionPerformed

        if("Start".equals(startTCPServer.getActionCommand())){
            // start TCP server
            int port = (int)tcpServerPort.getValue();
            int maxConn = (int)tcpServerMaxConnections.getValue();
            // validate the port
            myTCPServer = new TCPServer(port,maxConn);
            startTCPServer.setText("Stop");
            EnableServerOptions(false);
        }else if("Stop".equals(startTCPServer.getActionCommand())){
            // Stop the server 
            myTCPServer.stopServer();
            startTCPServer.setText("Start");
            EnableServerOptions(true);
        }           
    }//GEN-LAST:event_startTCPServerActionPerformed

    private void tcpServerAdvancedSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tcpServerAdvancedSettingsActionPerformed
        TCPServerAdvancedSettingsDialog.setVisible(true);
    }//GEN-LAST:event_tcpServerAdvancedSettingsActionPerformed

    private void cancel_tcpServerAdvSettActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_tcpServerAdvSettActionPerformed
         TCPServerAdvancedSettingsDialog.setVisible(false);
         
    }//GEN-LAST:event_cancel_tcpServerAdvSettActionPerformed

    private void save_tcpServerAdvSettActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_tcpServerAdvSettActionPerformed
        TCPServerAdvancedSettingsDialog.setVisible(false);
    }//GEN-LAST:event_save_tcpServerAdvSettActionPerformed

    private void clearTCPLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTCPLogActionPerformed
        myTCPServer.rxPackets.clear();
        myTCPServer.TCPserverModel.setRowCount(0);
    }//GEN-LAST:event_clearTCPLogActionPerformed

    private void ftpClient_sendLocal2RemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ftpClient_sendLocal2RemoteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ftpClient_sendLocal2RemoteActionPerformed

    private void ftpClient_ServerConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ftpClient_ServerConnectActionPerformed
        if("Connect".equals(ftpClient_ServerConnect.getActionCommand())){
        // validate the server IP
        String serverIP  = ftpClient_serverIP.getText();
        int port = (int)ftpClient_serverPort.getValue();
        String userName = ftpClient_ServerName.getText();
        String userPass = new String(ftpClient_ServerPass.getPassword());
        // show some log to the user 
        userLog("Atempting to connect"+ serverIP+"....");
         
        myFtpClient = new FTPclient(serverIP, port, userName, userPass);
         
         if(myFtpClient.isConnected()){
             ftpClient_ServerConnect.setText("Disconnect");
         }
        }else {
            userLog("disconnecting ... ");
            ftpClient_ServerConnect.setText("Connect");
        }
    }//GEN-LAST:event_ftpClient_ServerConnectActionPerformed

    private void refreshRemoteDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshRemoteDirActionPerformed
        if(myFtpClient.isConnected()){
            myFtpClient.showJtreeforRemote();
        }
    }//GEN-LAST:event_refreshRemoteDirActionPerformed

    private void StartDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartDownloadActionPerformed
        DownloadManager.StartDownload();
    }//GEN-LAST:event_StartDownloadActionPerformed

    private void CancelDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelDownloadActionPerformed
        // TODO add your handling code here:
         DownloadManager.CancelDownload();
    }//GEN-LAST:event_CancelDownloadActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton BrowseFTPPath;
    public javax.swing.JButton CancelDownload;
    private javax.swing.JMenuItem Clear;
    private javax.swing.JMenu DebugMenu;
    private javax.swing.JPanel DeviceControls;
    public javax.swing.JPanel DeviceProperties;
    private javax.swing.JPanel EmailClient;
    public javax.swing.JTextField FTPClientCount;
    private javax.swing.JScrollPane FTPClientTabel;
    public javax.swing.JTable FTPClientTableData;
    private javax.swing.JPanel FTPConnectionControl;
    private javax.swing.JSpinner FTPMaxLoginPerIP;
    private javax.swing.JPasswordField FTPPassword;
    private javax.swing.JLabel FTPPathLable;
    private javax.swing.JPanel FTPServerClientStatus;
    private javax.swing.JPanel FTPServerConfigPanel;
    private javax.swing.JTextField FTPServerName;
    private javax.swing.JTextField FTPServerPath;
    private javax.swing.JSpinner FTPServerPort;
    private javax.swing.JButton FTPServerStart;
    private javax.swing.JTextField FTPUserName;
    private javax.swing.JLabel FTPconnectionsLabel;
    private javax.swing.JSpinner FTPmaxLogin;
    private javax.swing.JLabel FTPpasswordLabel;
    private javax.swing.JLabel FTPportLabel;
    public javax.swing.JTextArea FTPserverCMDLog;
    private javax.swing.JScrollPane FTPserverCMDLogPane;
    private javax.swing.JPanel FTPserverPropPanel;
    private javax.swing.JLabel FTPservernameLable;
    private javax.swing.JLabel FTPusernameLabel;
    private javax.swing.JPanel FileMangerPanel;
    private javax.swing.JMenuItem FontSize;
    private javax.swing.JPanel HTTPserver;
    private javax.swing.JPanel Localside;
    private javax.swing.JFileChooser MyFilePicker;
    private javax.swing.JPanel PacketSender;
    private javax.swing.JButton RefreshLocalDir;
    private javax.swing.JPanel RemoteSide;
    private javax.swing.JMenu SetupMenu;
    private javax.swing.JToggleButton ShowFTPPassword;
    public javax.swing.JButton StartDownload;
    private javax.swing.JPanel StatusPanel;
    private javax.swing.JDialog TCPServerAdvancedSettingsDialog;
    public javax.swing.JTable TCPServerLog;
    private javax.swing.JPanel TCPserver;
    private javax.swing.JPanel TelnetTerminal;
    private javax.swing.JMenuBar Toolbar;
    private javax.swing.JMenu ToolsMenu;
    private javax.swing.JPanel TransferCotrolPanel;
    private javax.swing.JPanel UDPserver;
    public javax.swing.JButton browseFileLocation;
    private javax.swing.JButton cancel_tcpServerAdvSett;
    private javax.swing.JButton clearTCPLog;
    private javax.swing.JPanel contactInfopanel;
    private javax.swing.JScrollPane deviceDescriptionPane;
    private javax.swing.JPanel deviceDetailsContainer;
    public javax.swing.JTable deviceDetailsTable;
    private javax.swing.JPanel deviceDownloadsPanel;
    private javax.swing.JPanel deviceFinderPanel;
    public javax.swing.JPanel deviceHttpInfoContainer;
    private javax.swing.JPanel deviceImageContainer;
    public javax.swing.JTree dfDeviceTree;
    private javax.swing.JButton df_settings;
    private javax.swing.JButton df_startScan;
    public javax.swing.JLabel dowloadingFileName;
    public javax.swing.JDialog downloadFIleDialog;
    public javax.swing.JPanel downloadFileListContainer;
    public javax.swing.JLabel downloadFilePath;
    public javax.swing.JProgressBar downloadFileProgress;
    private javax.swing.JPanel downloadLocation;
    private javax.swing.JPanel downloadOptionPanel;
    private javax.swing.JPanel downloadSettingsPanel;
    private javax.swing.JButton email_send;
    private javax.swing.JTextField email_userEmail;
    private javax.swing.JTextArea email_userMessage;
    private javax.swing.JTextField email_userName;
    private javax.swing.JTextField email_userPhone;
    private javax.swing.JPanel fileDownloadStatus;
    private javax.swing.Box.Filler filler14;
    private javax.swing.Box.Filler filler18;
    private javax.swing.JButton ftpClient_ServerConnect;
    private javax.swing.JTextField ftpClient_ServerName;
    private javax.swing.JPasswordField ftpClient_ServerPass;
    private javax.swing.JButton ftpClient_browseLocalPath;
    private javax.swing.JTable ftpClient_fileTransferStatus;
    public javax.swing.JTree ftpClient_localFileTree;
    public javax.swing.JTextField ftpClient_localPath;
    public javax.swing.JTextField ftpClient_remoteCWR;
    private javax.swing.JButton ftpClient_remoteDeleteFile;
    public javax.swing.JTree ftpClient_remoteFileTree;
    private javax.swing.JButton ftpClient_renameRemoteFile;
    private javax.swing.JButton ftpClient_sendLocal2Remote;
    private javax.swing.JButton ftpClient_sendRemote2Local;
    private javax.swing.JTextField ftpClient_serverIP;
    private javax.swing.JSpinner ftpClient_serverPort;
    private javax.swing.JLabel hostAddressLable;
    private javax.swing.JScrollPane hrDeviceDownloadsPanel;
    public javax.swing.JTextArea hr_deviceDescription;
    public javax.swing.JTree hr_deviceDownloadsTree;
    public javax.swing.JLabel hr_deviceImage;
    private javax.swing.JTabbedPane hsTabs;
    private javax.swing.JMenuItem item_packetSender;
    private javax.swing.JMenuItem item_serialClient;
    private javax.swing.JMenuItem item_tcpClient;
    private javax.swing.JMenuItem item_tcpServer;
    private javax.swing.JMenuItem item_telnetClient;
    private javax.swing.JMenuItem item_udpClient;
    private javax.swing.JMenuItem item_udpServer;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel lablePath;
    private javax.swing.JLabel lable_password;
    private javax.swing.JLabel lable_port;
    private javax.swing.JLabel lable_serverIP;
    private javax.swing.JLabel lable_username;
    private javax.swing.JLabel mail_emailLable;
    private javax.swing.JLabel mail_nameLabel;
    private javax.swing.JLabel mail_phoneLable;
    private javax.swing.JSplitPane mainUI;
    private javax.swing.JLabel maxLogin_lable;
    private javax.swing.JLabel maxLoginperIP_lable;
    private javax.swing.JPanel myFTPclient;
    private javax.swing.JPanel myFTPserver;
    private javax.swing.JButton refreshRemoteDir;
    private javax.swing.JButton save_tcpServerAdvSett;
    private javax.swing.JPanel split_DeviceList;
    private javax.swing.JPanel split_DeviceProp;
    private javax.swing.JButton startTCPServer;
    public javax.swing.JButton tcpServerAdvancedSettings;
    private javax.swing.JComboBox<String> tcpServerBind;
    public javax.swing.JSpinner tcpServerMaxConnections;
    public javax.swing.JSpinner tcpServerPort;
    private javax.swing.JTextField tcpServerReceiveBufferSize;
    private javax.swing.JTextField tcpServerTimeout;
    private javax.swing.JLabel tcpserverPortLable;
    private javax.swing.JLabel tcpserver_maxconnLable;
    private javax.swing.JTextField telentCMD;
    public javax.swing.JTextArea telentClientTerminal;
    private javax.swing.JButton telneClientConnect;
    public javax.swing.JCheckBox telnetAddCR;
    public javax.swing.JCheckBox telnetAddCRLF;
    public javax.swing.JCheckBox telnetAddLF;
    private javax.swing.JButton telnetCMDSend;
    private javax.swing.JPanel telnetCMDSendPanel;
    private javax.swing.JPanel telnetConnectionsPannel;
    private javax.swing.JCheckBox telnetDeleteCMDAfterSend;
    private javax.swing.JCheckBox telnetEnableLocalEcho;
    private javax.swing.JTextField telnetHostAddress;
    private javax.swing.JLabel telnetHostPortLable;
    private javax.swing.JSpinner telnetPort;
    private javax.swing.JScrollPane telnetServerResp;
    private javax.swing.JPanel telnetTermainal;
    private javax.swing.JPopupMenu terminalPOPUpmenu;
    // End of variables declaration//GEN-END:variables
}
